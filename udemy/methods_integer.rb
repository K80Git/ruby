=begin
  
encode
encode!
include?
%
*
+
count
partition
sum
next
to_c
casecmp
casecmp?
insert
bytesize
match
match?
succ!
<=>
next!
upto
index
replace
==
===
chr
=~
rindex
[]
[]=
byteslice
getbyte
setbyte
clear
scrub
empty?
eql?
-@
downcase
scrub!
dump
undump
upcase
+@
capitalize
swapcase
upcase!
downcase!
capitalize!
swapcase!
hex
oct
freeze
inspect
bytes
chars
codepoints
lines
reverse
reverse!
concat
split
crypt
ord
length
size
grapheme_clusters
succ
start_with?
center
prepend
strip
rjust
rstrip
ljust
chomp
delete_suffix
sub
to_str
to_sym
intern
sub!
lstrip
<<
to_s
to_i
to_f
gsub!
chop!
chomp!
delete_prefix
gsub
chop
end_with?
scan
tr
strip!
lstrip!
rstrip!
delete_prefix!
delete_suffix!
delete!
tr_s
delete
squeeze
tr!
tr_s!
each_grapheme_cluster
squeeze!
each_line
each_byte
each_char
each_codepoint
b
slice
slice!
hash
encoding
force_encoding
unicode_normalize
valid_encoding?
ascii_only?
rpartition
unicode_normalize!
unicode_normalized?
unpack
unpack1
to_r
between?
<=
>=
clamp
<
>
instance_variable_defined?
remove_instance_variable
instance_of?
kind_of?
is_a?
tap
instance_variable_get
instance_variable_set
protected_methods
instance_variables
private_methods
method
public_method
public_send
singleton_method
define_singleton_method
extend
to_enum
enum_for
!~
respond_to?
object_id
send
display
class
nil?
dup
singleton_class
clone
then
itself
yield_self
untaint
taint
tainted?
trust
untrust
untrusted?
singleton_methods
frozen?
methods
public_methods
equal?
!
instance_exec
!=
instance_eval
__id__
__send__
yaokenichi@mba udemy % ruby hello.rb
Hello, World
13
HELLO WORLD
Hello World
HELLO WORLD
HELLO WORLD
-@
**
<=>
upto
<<
<=
>=
==
chr
===
>>
[]
%
&
inspect
*
+
ord
-
/
size
succ
<
>
to_int
coerce
to_s
to_i
to_f
divmod
to_r
fdiv
modulo
remainder
abs
magnitude
integer?
floor
ceil
round
truncate
^
odd?
even?
allbits?
anybits?
nobits?
downto
times
pred
pow
bit_length
digits
gcd
lcm
gcdlcm
numerator
denominator
rationalize
next
div
|
~
+@
eql?
singleton_method_added
i
real?
zero?
nonzero?
finite?
infinite?
step
positive?
negative?
clone
dup
arg
rectangular
rect
polar
real
imaginary
imag
abs2
angle
phase
conjugate
quo
to_c
conj
between?
clamp
instance_variable_defined?
remove_instance_variable
instance_of?
kind_of?
is_a?
tap
instance_variable_get
instance_variable_set
protected_methods
instance_variables
private_methods
method
public_method
public_send
singleton_method
define_singleton_method
extend
to_enum
enum_for
=~
!~
respond_to?
freeze
object_id
send
display
class
nil?
hash
singleton_class
then
itself
yield_self
untaint
taint
tainted?
trust
untrust
untrusted?
singleton_methods
frozen?
methods
public_methods
equal?
!
instance_exec
!=
instance_eval
__id__
__send__
  
=end